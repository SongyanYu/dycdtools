<<<<<<< HEAD
=======
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by=by.value)
colnames(obs)<-c("Date","Depth","Value")
>>>>>>> 71ac966d51139cba53717a9bf4ef3e3ab9988501
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
right_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3.report two objective functions' value and scatter plot sim vs. obs
#---
#message(NSE(temp.both$sim,obs=temp.both$obs))   #NSE
#message(sqrt(mean((temp.both$sim-temp.both$obs)^2,na.rm = TRUE)))  # RMSE
p<-temp.both%>%
ggplot(aes(x=obs,y=sim,colour=Depth))+
geom_point()+
geom_abline(color="red")+
scale_color_gradientn(colors = brewer.pal(11, "Spectral"), name = "Depth (m)")+
xlab("Observed")+
ylab("Simulated")+
theme_classic()
plot(p)
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
prof.plot(sim=temp.interpolated,
obs = obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
prof.plot<-function(sim=temp.interpolated,
obs=obs.temp,
sim.start="2017-06-06",
sim.end="2020-02-29",
plot.start="2017-06-06",
plot.end="2020-02-29",
xlabel="Temperature \u00B0C",
min.depth=0,max.depth,by.value,
plot.save=FALSE,
file_name,
height=11,width=18){
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by= by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
right_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3. profile plot sim vs. obs, faceted by Date
#---
p<-temp.both%>%
ggplot()+
geom_point(aes(y=Depth,x=obs),col="red")+
geom_path(aes(y=Depth,x=sim))+
facet_wrap(~Date)+
ylim(max.depth,min.depth)+
xlab(xlabel)+
ylab("Depth (m)")+
theme_classic()
plot(p)
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
prof.plot(sim=temp.interpolated,
obs = obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
ts.plot<-function(sim=temp.interpolated,
obs=obs.temp,
target.depth=c(1,6,12,30),
sim.start="2017-06-06",
sim.end="2020-02-29",
plot.start="2017-06-06",
plot.end="2020-02-29",
min.depth=0,max.depth=33,by.value=0.5,
ylabel="Temperature \u00B0C",
plot.save=FALSE,
file_name,
height=7,
width=11){
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by=by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
left_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3. time series plot sim vs. obs, faceted by Depth
#---
p<-temp.both%>%
filter(Depth %in% target.depth)%>%
ggplot()+
geom_line(aes(x=Date,y=sim))+
geom_point(aes(x=Date,y=obs),col="red")+
facet_grid(~Depth)+
theme_classic()+
labs(y=ylabel)
plot(p)
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
ts.plot(sim = temp.interpolated,
obs = obs_temp,
target.depth=c(1,6),
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
ylabel="Temperature \u00B0C",
min.depth=0,
max.depth=13,
by.value=0.5)
devtools::load_all()
devtools::document()
?par
?on.exit
library(usethis)
library(usethis)
devtools::load_all()
devtools::document()
library(Rtools)
install.packages("Rtools")
installed.packages("roxygen2")
library(roxygen2)
install.packages("roxygen2")
install.packages("Rtools")
setwd("D:/New folder/Google Drive/R_Practice")
Sys.which("make")
Sys.which("make")
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
devtools::document()
var.values<-extract.output(dycd.output="data/dysim.nc",var.extract=c("TEMP"))
var.values<-extract.output(dycd.output="data/dysim.nc",var.extract=c("TEMP"))
var.values<-extract.output(dycd.output="extdata/dysim.nc",var.extract=c("TEMP"))
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
var.values<-ext.output(dycd.output="extdata/dysim.nc",var.extract=c("TEMP"))
data(dysim.nc)
?nc_create
var.values$dyresmTEMPTURE_Var
?ncdim_def
?ncvar_def
dycd.output="extdata/dysim.nc"
var.extract=c("TEMP")
simData <- nc_open(dycd.output)
simData
varNames <- names(simData$var)
varNames
simData$ndims
simData$filename
simData$id
simData$natts
simData$dim
simData$dim[1]
simData$ndims
simData$dim[2]
# Define an integer dimension
dimState <- ncdim_def( "StateNo", "count", 1:50 )
dimState
# Make an integer variable.  Note that an integer variable can have
# a double precision dimension, or vice versa; there is no fixed
# relationship between the precision of the dimension and that of the
# associated variable.  We just make an integer variable here for
# illustration purposes.
varPop <- ncvar_def("Pop", "count", dimState, -1,
longname="Population", prec="integer")
varPop
# Create a netCDF file with this variable
ncnew <- nc_create( "states_population.nc", varPop )
# Write some values to this variable on disk.
popAlabama <- 4447100
?ncvar_pur
?ncvar_put
ncvar_put( ncnew, varPop, popAlabama, start=1, count=1 )
nc_close(ncnew)
nc_close(simData)
devtools::load_all()
devtools::document()
system.file("extdata", "dysim.nc", package = "dycdtools")
devtools::load_all()
devtools::document()
# check on R-hub
library(rhub)
library(devtools)
devtools::load_all()
devtools::document()
devtools::check_rhub()
devtools::check_rhub()
devtools::spell_check()
devtools::document()
devtools::spell_check()
devtools::release()
library(devtools)
devtools::load_all()
devtools::document()
# check on R-hub
library(rhub)
devtools::check_rhub()
library(usethis)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::check_rhub()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::check_rhub()
devtools::spell_check()
devtools::release()
cal.para<-"../dycdTools pkg and data/Example data/Data/Calibration_parameters.csv"
#---
# 1.combination of parameter values
#---
para.raw<-read.csv(file=cal.para)
View(para.raw)
seq.list<-list()
?seq
cal.para<-"../dycdTools pkg and data/Example data/Data/Calibration_parameters.csv"
#---
# 1.combination of parameter values
#---
para.raw<-read.csv(file=cal.para)
View(para.raw)
seq.list<-list()
for(i in 1:nrow(para.raw)){
seq.list[[i]]<-seq(para.raw$Min[i],para.raw$Max[i],length.out =para.raw$Increment[i])
}
seq.list
if(length(seq.list)==1){
para.df<-data.frame(seq.list[[1]])
}
if(length(seq.list)==2){
para.df<-data.frame(seq.list[[1]],
rep(seq.list[[2]],each=length(seq.list[[1]])))
}
if(length(seq.list)>2){
para.df<-data.frame(seq.list[[1]],
rep(seq.list[[2]],each=length(seq.list[[1]])))
for(i in 3:length(seq.list)){
para.df<-data.frame(para.df,
rep(seq.list[[i]],each=nrow(para.df)))
}
}
View(para.df)
colnames(para.df)<-para.raw$Parameter
View(para.df)
library(usethis)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
rep(1:3,10)
?rep
rep(1:3,length.out=10)
rep(1:3,10)[1:10]
rep(1:1,10)
sim.cores
?scan
dir.this<-"../../Sim_DYCD/191018-Okaraka_SY/"
log <- list.files(dir.this,pattern = ".log")
log
open(log[1])
log[1]
?list.files
log <- list.files(dir.this,pattern = ".log",full.names = TRUE)
open(log[1])
log[1]
open(log[2])
open(log[1])
while(TRUE){
tmp <- scan(log,1,what="char(0)",sep="\n",quiet=TRUE)
if(length(tmp)==0) {close(log) ; break }
out <- c(out[-1],tmp)
}
?open
log <- file(paste0(dir.this,'/dy.log'))
log
open(log)
out <- scan(log,10,what="char(0)",sep="\n",quiet=TRUE)
out
while(TRUE){
tmp <- scan(log,1,what="char(0)",sep="\n",quiet=TRUE)
if(length(tmp)==0) {close(log) ; break }
out <- c(out[-1],tmp)
}
out
grepl("END: LAKE SIMULATION",out)
devtools::load_all()
devtools::document()
devtools::load_all()
# clean up cluster
try({parallel::stopCluster(cl)})
library(devtools)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
# clean up cluster
try({parallel::stopCluster(cl)})
#### define function to run (and process?) the model on each core
run.iteration <- function(this.sim, dycd.wd) {
# which core to run it on?
core <- sim.cores[this.sim]
# id folder to use
dir.this <- paste0(dycd.wd,'/core', core)
# copy the parameters files from the base model folder into the iteration's folder
files.params <- list.files(path = dycd.wd,pattern = '.*\\.(par|chm|bio|sed)$',
recursive = FALSE, include.dirs = TRUE, full.names = TRUE)
file.copy(files.params, dir.this, overwrite = TRUE)
### !!!!!!! call code to modify the parameters files as needed here
#---
# change the parameter values in the input files
#---
for(m in 1:ncol(para.df)){
change_input_file(input_file = paste0(dir.this,"/",para.raw$Input_file[m]),
row_no = para.raw$Line_NO[m],
new_value = para.df[this.sim,m])
}
#---
# model simulation / run the .bat file
#---
user.wd <- getwd()
on.exit(setwd(user.wd))
setwd(dir.this)
bat.file <- list.files(pattern = ".bat")
shell(bat.file,intern = TRUE,wait=TRUE)
setwd(user.wd)
## verify that the sim has completed successfully
log <- file(paste0(dir.this,'/dy.log'))
open(log)
out <- scan(log,10,what="char(0)",sep="\n",quiet=TRUE)
while(TRUE){
tmp <- scan(log,1,what="char(0)",sep="\n",quiet=TRUE)
if(length(tmp)==0) {close(log) ; break }
out <- c(out[-1],tmp)
}
if (!TRUE %in% grepl("END: LAKE SIMULATION",out)) {
warning(paste0("Simulation No.",this.sim," did not complete successfully.\n"))
}
# copy the finished nc file for later processing (if needed)
file.copy(from = paste0(dir.this,"/DYsim.nc"),
to = paste0(dir.output,"/DYsim_",this.sim,".nc"))
### ! can also add additional model processing here and write to the output folder,
###   to take advantage of parallel speed if wanted
} # end per core function
library(devtools)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
?clusterEvalQ
devtools::document()
# check
devtools::check()
devtools::load_all()
devtools::document()
?copyDirectory
library(dycdtools)
devtools::document()
devtools::document()
devtools::document()
?clusterexport
?clusterEvalQ
library(dycdtools)
devtools::install_github("SongyanYu/dycdtools")
devtools::install_github("SongyanYu/dycdtools")
library(dycdtools)
calib.assist(cal.para = "../R Data/Calibration_parameters.csv",
combination = "all",
model.var = c("TEMP"),
obs.data = "../R Data/Obs_data_template.csv",
objective.function = c("NSE"),
start.date="2002-01-23",
end.date="2016-12-31",
dycd.wd = "../../../Sim_DYCD/191018-Okaraka_SY",
dycd.output = "../../../Sim_DYCD/191018-Okaraka_SY/DYsim.nc",
file_name = "../R output/Calibration.csv",
write.out=TRUE,
parallel=TRUE)
devtools::load_all()
devtools::document()
calib.assist(cal.para = "../R Data/Calibration_parameters.csv",
combination = "random",n=3,
model.var = c("TEMP"),
obs.data = "../R Data/Obs_data_template.csv",
objective.function = c("NSE"),
start.date="2002-01-23",
end.date="2016-12-31",
dycd.wd = "../../../Sim_DYCD/191018-Okaraka_SY",
dycd.output = "../../../Sim_DYCD/191018-Okaraka_SY/DYsim.nc",
file_name = "../R output/Calibration.csv",
write.out=TRUE,
parallel=TRUE)
library(dycdtools)
devtools::install_github("SongyanYu/dycdtools")
devtools::install_github("SongyanYu/dycdtools")
library(dycdtools)
calib.assist(cal.para = "../R Data/Calibration_parameters.csv",
combination = "random",n=3,
model.var = c("TEMP"),
obs.data = "../R Data/Obs_data_template.csv",
objective.function = c("NSE"),
start.date="2002-01-23",
end.date="2016-12-31",
dycd.wd = "../../../Sim_DYCD/191018-Okaraka_SY",
dycd.output = "../../../Sim_DYCD/191018-Okaraka_SY/DYsim.nc",
file_name = "../R output/Calibration.csv",
write.out=TRUE,
parallel=TRUE)
devtools::document()
iteration<-c(2,4,7)
# check on R-hub
library(rhub)
list_validated_emails()
validate_email()
devtools::check_rhub()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::load_all()
devtools::document()
# check
devtools::check()
# test
use_testthat()
# check on R-hub
library(rhub)
list_validated_emails()
validate_email()
devtools::check_rhub()
devtools::spell_check()
devtools::release()
check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
.Last.error.trace
devtools::check_win_devel()
devtools::release()
<<<<<<< HEAD
devtools::release()
# either install the package from CRAN
install.packages("dycdtools")  # the latest version is 0.3.0
# or from GitHub
devtools::install_github("SongyanYu/dycdtools")
library(dycdtools)
#---
# Read in model calibration outcome
#---
calibration<-read.csv("Calibration.csv")
# DYCD temperature simulations using the optimal set of the three parameters
var.values<-ext.output(dycd.output = "Sim_DYCD/DYsim.nc",
var.extract = c("TEMP"))
=======
library(usethis)
create_package(path="dycdtool3")
>>>>>>> 71ac966d51139cba53717a9bf4ef3e3ab9988501
