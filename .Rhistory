min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_scatter accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_scatter(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_ts outputs a plot object',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_true(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_ts accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_ts outputs a plot object',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_true(is.object(plot_ts(sim = sim,
obs = obs,
target.depth = 1,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_ts accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
sim.start = '01-01-2020'
sim.end = '2020-01-01'
plot.start = '2020-01-01'
plot.end = '2020-01-01'
ymd(plot.start)
is.na(ymd(plot.start))
is.na(ymd(plot.end))
is.na(ymd(sim.end))
is.na(ymd(sim.start))
try(is.na(ymd(sim.start)))
try(is.na(ymd(sim.start)), silent = TRUE)
any(is.na(ymd(plot.start)), is.na(ymd(plot.end)),
try(is.na(ymd(sim.start)), silent = TRUE), is.na(ymd(sim.end)))
if(any(is.na(ymd(plot.start)), is.na(ymd(plot.end)),
try(is.na(ymd(sim.start)), silent = TRUE), is.na(ymd(sim.end)))){
stop('Make sure date format is \'%Y-%m-%d\'\n')
}
devtools::load_all()
devtools::document()
test_that('plot_ts accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_ts accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_warning(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
expect_error(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
date <- '2020-01-01'
date
ymd(date)
mdy(date)
library(lubridate)
!is.na(parse_date_time(c('12/05/2016','35/11/2067','12/52/1000'),orders="dmy"))
dmy(c('12/05/2016','35/11/2067','12/52/1000'))
?ymd
dmy(c('12/05/2016','35/11/2067','12/52/1000'), quiet = TRUE)
devtools::load_all()
test_that('plot_ts accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_ts(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
ylabel = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1)))
})
test_that('plot_cont_comp accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
devtools::load_all()
test_that('plot_cont_comp accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
test_that('plot_cont_comp accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
devtools::load_all()
devtools::document()
goodpractice::gp()
devtools::load_all()
test_that('plot_cont_comp outputs a plot object',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
test_that('plot_cont_comp accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,1,71),
nrow = 6,
ncol = 2)
sim
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
sim.end = '2020-01-01'
plot.start = '2020-01-01'
plot.end = '2020-01-01'
sim.start = '2020-01-01'
legend.title = 'degrees'
min.depth = 0
max.depth = 5
by.value = 1
nlevels = 20
if(any(is.na(ymd(plot.start, quiet = TRUE)),
is.na(ymd(plot.end, quiet = TRUE)),
is.na(ymd(sim.start, quiet = TRUE)),
is.na(ymd(sim.end, quiet = TRUE)))){
stop('Make sure date format is \'%Y-%m-%d\'\n')
}
plot.date <- seq.Date(from = as.Date(plot.start, format = "%Y-%m-%d"),
to = as.Date(plot.end, format = "%Y-%m-%d"),
by = "day")
sim.date <- seq.Date(from = as.Date(sim.start, format = "%Y-%m-%d"),
to = as.Date(sim.end, format = "%Y-%m-%d"),
by = "day")
plot.date
sim.date
index <- match(seq(lubridate::year(plot.date)[1],
lubridate::year(plot.date)[length(plot.date)],
by = 1),
lubridate::year(plot.date))
index
plot.sim <-
sim[, c(match(plot.date[1],sim.date):
match(plot.date[length(plot.date)],sim.date))]
plot.sim
View(sim)
ncol(plot.sim)
rep('2020-01-01')
rep('2020-01-01', 5)
rep(0:5, 2)
obs <- data.frame(Date = c(rep('2020-01-01', 5), rep('2020-01-02', 5)),
Depth = rep(0:5, 2),
TEMP = rep(29:24),2)
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
obs <- data.frame(Date = c(rep('2020-01-01', 5), rep('2020-01-02', 5)),
Depth = rep(0:5, 2),
TEMP = rep(29:24),2)
Date = c(rep('2020-01-01', 5), rep('2020-01-02', 5))
Date
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24),2)
View(obs)
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24),2)
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:25),2)
29:25
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24),2)
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24,2)
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24,2))
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
plot.date <- seq.Date(from = as.Date(plot.start, format = "%Y-%m-%d"),
to = as.Date(plot.end, format = "%Y-%m-%d"),
by = "day")
sim.date <- seq.Date(from = as.Date(sim.start, format = "%Y-%m-%d"),
to = as.Date(sim.end, format = "%Y-%m-%d"),
by = "day")
index <- match(seq(lubridate::year(plot.date)[1],
lubridate::year(plot.date)[length(plot.date)],
by = 1),
lubridate::year(plot.date))
plot.sim <-
sim[, c(match(plot.date[1],sim.date):
match(plot.date[length(plot.date)],sim.date))]
plot.sim
sim.date
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-02',
plot.start = '2020-01-01',
plot.end = '2020-01-02',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
test_that('plot_cont_comp outputs a plot object',{
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24,2))
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
expect_true(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '2020-01-01',
sim.end = '2020-01-02',
plot.start = '2020-01-01',
plot.end = '2020-01-02',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
?filled.contour
is.plot
?plot
test_that('plot_cont_comp accept right format of date',{
obs <- data.frame(Date = '2020-01-01',
Depth = 0:5,
TEMP = 29:24)
sim <- matrix(c(28,28,28,27,25,24),
nrow = 6,
ncol = 1)
expect_error(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
test_that('plot_cont_comp accept right format of date',{
obs <- data.frame(Date = c(rep('2020-01-01', 6), rep('2020-01-02', 6)),
Depth = rep(0:5, 2),
TEMP = rep(29:24,2))
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
expect_error(is.object(plot_cont_comp(sim = sim,
obs = obs,
sim.start = '01-01-2020',
sim.end = '2020-01-01',
plot.start = '2020-01-01',
plot.end = '2020-01-01',
legend.title = 'degrees',
min.depth = 0,
max.depth = 5,
by.value = 1,
nlevels = 20)))
})
sim <- matrix(c(28,28,28,27,25,24,12,13,14,15,16,17),
nrow = 6,
ncol = 2)
#' # contour plot of the sim data frame
p <- plot_cont(sim = sim,
sim.start = "2020-01-01",
sim.end = "2020-01-02",
legend.title = "T \u00B0C",
min.depth = 0, max.depth = 5, by.value = 1,
nlevels = 20)
